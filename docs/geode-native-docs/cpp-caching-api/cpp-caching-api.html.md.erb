---
title:  Pivotal GemFire Native Client C++ API
---

This section describes the primary classes and usage conventions for the native client C++ API. It demonstrates how to use the API to create caches and perform data serialization.

The C++ API documentation is available at [http://gemfire-apis.docs.pivotal.io](http://gemfire-apis.docs.pivotal.io). It provides extensive implementation details for the C++ structures and functions.

Several example API programs are included in the `SampleCode` directory. See [QuickStart Examples and Guide](../introduction/examples-quickstart.html#examples-quickstart).

-   **[About the Native Client C++ API](gfe-cpp-api.html)**

    The native client C++ API allows C++ and .NET developers to programmatically create, populate, and manage a Geode distributed system. The C++ library is thread-safe, except where specified otherwise in the API documentation at [http://gemfire-apis.docs.pivotal.io](http://gemfire-apis.docs.pivotal.io).

-   **[Creating a Cache](creating-cache.html)**

    The code snippets in this section show cache creation.

-   **[Creating a Proxy Client-Side Region](creating-region.html)**

    This section provides code examples for creating and customizing proxy client-side regions.

-   **[Adding an Entry to the Cache](add-entry-to-cache.html)**

    You can populate a native client region with cache entries using the `Region::put` or the `Region::create` API functions. Code examples demonstrate these actions.

-   **[Accessing an Entry](accessing-entry.html)**

    The standard `Region::get API` method returns the value associated with the specified key, and passes the callback argument to any cache loaders or cache writers that are invoked in the operation.

-   **[Removing an Entry](removing-entry.html)**

    The standard `Region::remove` API removes the entry with the specified key and provides a user-defined parameter object to any `CacheWriter` or `CacheListener` invoked in the process.

-   **[Serializing Data](serialization_overview.html)**

    All data that Geode moves out of the local cache must be serializable.

-   **[Implementing User-Defined Objects in Java Clients](user-defined-objects.html)**

    You can use one of two methods to implement a user-defined object in a Java client that works with C++ clients: `Instantiator.register` and `DataSerializable`.

-   **[Using a Custom Class](using-custom-class.html)**

    This example shows how to use the defined `BankAccount` custom key type and the `AccountHistory` value type.

-   **[Creating New Statistics](creating-new-statistics.html)**

    This example provides a programmatic code sample for creating and registering new statistics.


